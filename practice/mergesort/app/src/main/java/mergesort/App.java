/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mergesort;

public class App {
    public static void main(String[] args) {
        int[] array = {3,9,4,7,5,0,1,6,8,2};

        int[] resultArray = new App().solution(array);

        System.out.print("resultArray : ");
        for (int a: resultArray) {
            System.out.print(a + ", ");
        }
        System.out.println();
    }

    public void mergeSort(int[] arr, int[] tmp, int start, int end) {
        // start = end 같을 경우, 원소가 한개이므로, sort할 필요 없다.
        // 따라서, start < end 인 경우에만, sort!
        if(start < end) {
            int mid = (start + end) / 2;

            // 왼쪽 정렬
            mergeSort(arr, tmp, start, mid);

            // 오른쪼 정렬
            mergeSort(arr, tmp, mid + 1, end);

            // 이미 정렬된 배열 병합
            merge(arr, tmp, start, mid, end);
        }
    }

    private void merge(int[] arr, int[] tmp, int start, int mid, int end) {
        // 정렬된 배열을 임시저장소에 필요한 만큼 복사 --> why? 비교할 때 기존 값을 보존하기 위해,
        for (int i = start; i <= end; i++) {
            tmp[i] = arr[i];
        }

        int part1FirstIndex = start;
        int part2FirstIndex = mid + 1;

        int resultArrayIndex = start;

        while (part1FirstIndex <= mid && part2FirstIndex <= end) {
            if(tmp[part1FirstIndex] <= tmp[part2FirstIndex]) {
                arr[resultArrayIndex] = tmp[part1FirstIndex];
                part1FirstIndex++;
            } else {
                arr[resultArrayIndex] = tmp[part2FirstIndex];
                part2FirstIndex++;
            }
            resultArrayIndex++;
        }

        // part1에 데이터가 남아 있고 part2는 비어있는 경우(예 : 5,7,9 / 1, 2) : for문 돌려주기
        // cf. part1에 비어있고, part2가 남아 있는 경우에는 for문이 필요 없다. 왜냐하면 이미 정렬되어 있기 때문에
        for (int i = 0; i <= mid - part1FirstIndex; i++) {
            arr[resultArrayIndex + i] = tmp[part1FirstIndex + i];
        }
    }

    public int[] solution(int[] arr) {
        int[] tmp = new int[arr.length];

        mergeSort(arr, tmp, 0, arr.length - 1);

        return arr;
    }
}
